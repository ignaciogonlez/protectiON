"""
Django settings for protectiON project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from urllib.parse import urlparse

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# ─── SECURITY ────────────────────────────────────────────────────────────────

# Load environment variables from a local .env file (only in development)
if os.path.exists(BASE_DIR / '.env'):
    from dotenv import load_dotenv
    load_dotenv()

# SECRET_KEY should come from env for security
SECRET_KEY = os.getenv(
    'SECRET_KEY',
    'django-insecure-&u-$eak0!uyb(_$5pif3o-^^xpqtf@(dk2=ts(tcalyj8gnc+)'  # fallback for local dev
)

# DEBUG mode flag
DEBUG = os.getenv('DEBUG', 'True') == 'True'

# Hosts allowed to serve this app
ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', '').split(',') if os.getenv('ALLOWED_HOSTS') else []


# ─── APPLICATION DEFINITION ─────────────────────────────────────────────────

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # third‑party
    'rest_framework',
    'rest_framework.authtoken',
    'storages',              # <-- agregado para S3

    # local apps
    'appProtectiOn',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'protectiON.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # look in <BASE_DIR>/templates first
        'DIRS': [ BASE_DIR / 'templates' ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'protectiON.wsgi.application'


# ─── DATABASE CONFIGURATION ─────────────────────────────────────────────────

# default to SQLite for local development
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME':   BASE_DIR / 'db.sqlite3',
    }
}

# override with Postgres when DATABASE_URL is set (e.g. in Render)
if db_url := os.getenv('DATABASE_URL'):
    parsed = urlparse(db_url)
    DATABASES['default'] = {
        'ENGINE':   'django.db.backends.postgresql',
        'NAME':     parsed.path.lstrip('/'),
        'USER':     parsed.username,
        'PASSWORD': parsed.password,
        'HOST':     parsed.hostname,
        'PORT':     parsed.port,
    }


# ─── PASSWORD VALIDATION ────────────────────────────────────────────────────

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# ─── INTERNATIONALIZATION ───────────────────────────────────────────────────

LANGUAGE_CODE = 'en-us'
TIME_ZONE     = 'UTC'
USE_I18N      = True
USE_TZ        = True


# ─── STATIC & MEDIA FILES ───────────────────────────────────────────────────

STATIC_URL        = 'static/'
STATICFILES_DIRS  = [ BASE_DIR / 'static' ]
STATIC_ROOT       = BASE_DIR / 'staticfiles'

# En local seguirá usando MEDIA_ROOT, pero en producción apuntará a S3
MEDIA_URL         = 'media/'
MEDIA_ROOT        = BASE_DIR / 'media'


# ─── DEFAULT PK FIELD TYPE ──────────────────────────────────────────────────

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# ─── DJANGO REST FRAMEWORK ──────────────────────────────────────────────────

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
}


# ─── LOGIN / LOGOUT REDIRECTS ───────────────────────────────────────────────

LOGIN_REDIRECT_URL  = 'home'
LOGOUT_REDIRECT_URL = 'login'


# ─── AWS S3 STORAGE CONFIGURATION ──────────────────────────────────────────
AWS_ACCESS_KEY_ID         = os.getenv('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY     = os.getenv('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME   = os.getenv('AWS_STORAGE_BUCKET_NAME')
AWS_S3_REGION_NAME        = os.getenv('AWS_S3_REGION_NAME', 'eu-west-3')

if AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY and AWS_STORAGE_BUCKET_NAME:
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

    AWS_S3_SIGNATURE_VERSION = 's3v4'
    AWS_QUERYSTRING_AUTH     = False

    #  ❌  Quita el ACL porque tu bucket lo tiene deshabilitado
    AWS_DEFAULT_ACL          = None            # <─ cambio clave

    MEDIA_URL = f'https://{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com/'


    # (Opcional) si también quieres servir estáticos desde S3:
    # STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    # STATIC_URL = MEDIA_URL  # o separa en distinto bucket si prefieres

